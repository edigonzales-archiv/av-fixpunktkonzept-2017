import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*

def fosnrs = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]

task deleteData_compute_LFP3_auf_GP(type: SqlExecutor) {
    description = """Löscht alle Daten aus der Tabelle 'berechnungen_lfp3_auf_gp'.
    Dies ist notwendig, weil wir die Daten mittels Forschleife abfüllen und somit
    nicht immer alles löschen können/dürfen."""
    database = [targetDbUrl, targetDbUser, targetDbPass]    
    sqlParameters = [dbschema: dbSchema]    
    sqlFiles = ["sql/deleteData_LFP3_auf_GP.sql"]
}

fosnrs.each { fosnr ->
    def gem_bfs = fosnr.toString()
    task "compute_LFP3_auf_GP_$fosnr"(type: Db2Db) {
    description = "Berechnet LFP3 auf Grenzpunkte ausserhalb bebautes Gebiet für die Gemeinde $fosnr"
        sourceDb =  [targetDbUrl, targetDbUser, targetDbPass]
        targetDb = [targetDbUrl, targetDbUser, targetDbPass]
        sqlParameters = [bfs_nr: fosnr.toString(), dbschema: dbSchema]    
        transferSets = [
                new TransferSet("sql/computeLFP3_auf_GP.sql", dbSchema + ".berechnungen_lfp3_auf_gp", false),
        ]
    }
}

task compute_LFP3_auf_GP() {
    description = "Aggregationstask für die Berechnung der LFP auf GP."
    doLast {
        println "All dynamic tasks were performed."
    }
}

compute_LFP3_auf_GP.dependsOn {
    tasks.findAll { task -> task.name.startsWith('compute_LFP3_auf_GP_') }
}

task compute_Hochzielpunkte(type: Db2Db) {
    description = "Kopiert alle zu löschenden Hochzielpunkte in die vorgesehene Tabelle."
    sourceDb =  [targetDbUrl, targetDbUser, targetDbPass]
    targetDb = [targetDbUrl, targetDbUser, targetDbPass]
    sqlParameters = [dbschema: dbSchema]    
    transferSets = [
            new TransferSet("sql/computeHochzielpunkte.sql", dbSchema + ".berechnungen_hochzielpunkte", true),
    ]
}

task compute_LFP2_degradieren(type: Db2Db) {
    description = "Kopiert alle zu degradierenden LFP2 in die vorgesehene Tabelle."
    sourceDb =  [targetDbUrl, targetDbUser, targetDbPass]
    targetDb = [targetDbUrl, targetDbUser, targetDbPass]
    sqlParameters = [dbschema: dbSchema]    
    transferSets = [
            new TransferSet("sql/computeLFP2_degradieren.sql", dbSchema + ".berechnungen_lfp2_degradieren", true),
    ]
}

task insertData_TSP_ungleich_LFP2(type: SqlExecutor) {
    description = """Importiert (mittels INSERT) TSP, die nicht LFP2 (oder LFP1
    oder LV95 etc.) sind."""
    database = [targetDbUrl, targetDbUser, targetDbPass]    
    sqlParameters = [dbschema: dbSchema]    
    sqlFiles = ["sql/insertData_TSP_ungleich_LFP2.sql"]
}

task insertData_Gemeinde_lfp3_ohne_hoehe(type: SqlExecutor) {
    description = """Importiert (mittels INSERT) Gemeinden mit LFP3 ohne Höhen (mehrheitlich)."""
    database = [targetDbUrl, targetDbUser, targetDbPass]    
    sqlParameters = [dbschema: dbSchema]    
    sqlFiles = ["sql/insertData_Gemeinde_LFP3_ohne_Hoehe.sql"]
}

task insertData_Gemeinde_mit_HFP3(type: SqlExecutor) {
    description = """Importiert (mittels INSERT) Gemeinden mit HFP3-Netz."""
    database = [targetDbUrl, targetDbUser, targetDbPass]    
    sqlParameters = [dbschema: dbSchema]    
    sqlFiles = ["sql/insertData_Gemeinde_mit_HFP3.sql"]
}