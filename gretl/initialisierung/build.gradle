import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.*

def fosnrs = [2401,2402,2403,2404,2405,2406,2407,2408,2421,2422,2423,2424,2425,2426,2427,2428,2429,2445,2455,2456,2457,2461,2463,2464,2465,2471,2472,2473,2474,2475,2476,2477,2478,2479,2480,2481,2491,2492,2493,2495,2497,2498,2499,2500,2501,2502,2503,2511,2513,2514,2516,2517,2518,2519,2520,2523,2524,2525,2526,2527,2528,2529,2530,2532,2534,2535,2541,2542,2543,2544,2545,2546,2547,2548,2549,2550,2551,2553,2554,2555,2556,2571,2572,2573,2574,2575,2576,2578,2579,2580,2581,2582,2583,2584,2585,2586,2601,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622]

task dropSchema_Fixpunktkonzept(type: SqlExecutor) {
    description = "Löscht das Fixpunktekonzept-Schema in der Datenbank."
    database = [targetDbUrl, targetDbUser, targetDbPass]    
    sqlParameters = [dbschema: dbSchema]    
    sqlFiles = ["sql/deleteFixpunktekonzeptSchema.sql"]
}

task createSchema_Fixpunktkonzept(type: Ili2pgImportSchema) {
    description = "Erstellt das Fixpunktekonzept-Schema in der Datenbank mit den leeren Tabelle (gemäss INTERLIS-Modell)."
    database = [targetDbUrl, targetDbUser, targetDbPass]
    models = "SO_AV_Fixpunktkonzept_2017_20180203"
    modeldir = "http://models.geo.admin.ch;../ili/" 
    dbschema = dbSchema
    //createBasketCol = true
    nameByTopic = true
    createFk = true
    createFkIdx = true
    createGeomIdx = true
    createUnique = true
    createNumChecks = true
    createEnumTabs = true
    strokeArcs = true
    coalesceMultiSurface = true
    defaultSrsCode = 2056
}

fosnrs.each { fosnr ->
    def gem_bfs = fosnr.toString()
    task "create_View_LFP3_auf_GP_$fosnr"(type: SqlExecutor) {
    description = "Erstellt eine View _LFP3 auf GP_ für die Gemeinde $fosnr"
        database = [targetDbUrl, targetDbUser, targetDbPass]    
        sqlParameters = [dbschema: dbSchema]    
        sqlFiles = ["sql/createViewLFP3aufGP.sql"]
        sqlParameters = [bfs_nr: fosnr.toString(), dbschema: dbSchema]    
    }
}

task create_View_LFP3_auf_GP() {
    description = "Aggregationstask für die Erstellung der LFP auf GP Views."
    doLast {
        println "All dynamic tasks were performed."
    }
}

create_View_LFP3_auf_GP.dependsOn {
    tasks.findAll { task -> task.name.startsWith('create_View_LFP3_auf_GP_') }
}
